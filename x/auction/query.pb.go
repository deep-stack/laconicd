// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cerc/auction/v1/query.proto

package auction

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the format to query the parameters of the auction
// module
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse returns parameters of the auction module
type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// AuctionsRequest is the format for querying all the auctions
type QueryAuctionsRequest struct {
	// pagination defines an optional pagination info for the next request
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAuctionsRequest) Reset()         { *m = QueryAuctionsRequest{} }
func (m *QueryAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsRequest) ProtoMessage()    {}
func (*QueryAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{2}
}
func (m *QueryAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsRequest.Merge(m, src)
}
func (m *QueryAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsRequest proto.InternalMessageInfo

func (m *QueryAuctionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// AuctionsResponse returns the list of all auctions
type QueryAuctionsResponse struct {
	// List of auctions
	Auctions *Auctions `protobuf:"bytes,1,opt,name=auctions,proto3" json:"auctions,omitempty"`
	// pagination defines an optional pagination info for the next request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAuctionsResponse) Reset()         { *m = QueryAuctionsResponse{} }
func (m *QueryAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsResponse) ProtoMessage()    {}
func (*QueryAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{3}
}
func (m *QueryAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsResponse.Merge(m, src)
}
func (m *QueryAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsResponse proto.InternalMessageInfo

func (m *QueryAuctionsResponse) GetAuctions() *Auctions {
	if m != nil {
		return m.Auctions
	}
	return nil
}

func (m *QueryAuctionsResponse) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// AuctionRequest is the format for querying a specific auction
type QueryGetAuctionRequest struct {
	// Auction id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAuctionRequest) Reset()         { *m = QueryGetAuctionRequest{} }
func (m *QueryGetAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionRequest) ProtoMessage()    {}
func (*QueryGetAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{4}
}
func (m *QueryGetAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionRequest.Merge(m, src)
}
func (m *QueryGetAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionRequest proto.InternalMessageInfo

func (m *QueryGetAuctionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// AuctionResponse returns the details of the queried auction
type QueryGetAuctionResponse struct {
	// Auction details
	Auction *Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (m *QueryGetAuctionResponse) Reset()         { *m = QueryGetAuctionResponse{} }
func (m *QueryGetAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionResponse) ProtoMessage()    {}
func (*QueryGetAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{5}
}
func (m *QueryGetAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionResponse.Merge(m, src)
}
func (m *QueryGetAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionResponse proto.InternalMessageInfo

func (m *QueryGetAuctionResponse) GetAuction() *Auction {
	if m != nil {
		return m.Auction
	}
	return nil
}

// BidRequest is the format for querying a specific bid in an auction
type QueryGetBidRequest struct {
	// Auction id
	AuctionId string `protobuf:"bytes,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// Bidder address
	Bidder string `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
}

func (m *QueryGetBidRequest) Reset()         { *m = QueryGetBidRequest{} }
func (m *QueryGetBidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidRequest) ProtoMessage()    {}
func (*QueryGetBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{6}
}
func (m *QueryGetBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidRequest.Merge(m, src)
}
func (m *QueryGetBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidRequest proto.InternalMessageInfo

func (m *QueryGetBidRequest) GetAuctionId() string {
	if m != nil {
		return m.AuctionId
	}
	return ""
}

func (m *QueryGetBidRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

// BidResponse returns the details of the queried bid
type QueryGetBidResponse struct {
	// Bid details
	Bid *Bid `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (m *QueryGetBidResponse) Reset()         { *m = QueryGetBidResponse{} }
func (m *QueryGetBidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidResponse) ProtoMessage()    {}
func (*QueryGetBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{7}
}
func (m *QueryGetBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidResponse.Merge(m, src)
}
func (m *QueryGetBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidResponse proto.InternalMessageInfo

func (m *QueryGetBidResponse) GetBid() *Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

// BidsRequest is the format for querying all bids in an auction
type QueryGetBidsRequest struct {
	// Auction id
	AuctionId string `protobuf:"bytes,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *QueryGetBidsRequest) Reset()         { *m = QueryGetBidsRequest{} }
func (m *QueryGetBidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidsRequest) ProtoMessage()    {}
func (*QueryGetBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{8}
}
func (m *QueryGetBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidsRequest.Merge(m, src)
}
func (m *QueryGetBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidsRequest proto.InternalMessageInfo

func (m *QueryGetBidsRequest) GetAuctionId() string {
	if m != nil {
		return m.AuctionId
	}
	return ""
}

// BidsResponse returns details of all bids in an auction
type QueryGetBidsResponse struct {
	// List of bids in the auction
	Bids []*Bid `protobuf:"bytes,1,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (m *QueryGetBidsResponse) Reset()         { *m = QueryGetBidsResponse{} }
func (m *QueryGetBidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidsResponse) ProtoMessage()    {}
func (*QueryGetBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{9}
}
func (m *QueryGetBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidsResponse.Merge(m, src)
}
func (m *QueryGetBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidsResponse proto.InternalMessageInfo

func (m *QueryGetBidsResponse) GetBids() []*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

// AuctionsByBidderRequest is the format for querying all auctions containing a
// bidder address
type QueryAuctionsByBidderRequest struct {
	// Address of the bidder
	BidderAddress string `protobuf:"bytes,1,opt,name=bidder_address,json=bidderAddress,proto3" json:"bidder_address,omitempty"`
}

func (m *QueryAuctionsByBidderRequest) Reset()         { *m = QueryAuctionsByBidderRequest{} }
func (m *QueryAuctionsByBidderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsByBidderRequest) ProtoMessage()    {}
func (*QueryAuctionsByBidderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{10}
}
func (m *QueryAuctionsByBidderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsByBidderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsByBidderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsByBidderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsByBidderRequest.Merge(m, src)
}
func (m *QueryAuctionsByBidderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsByBidderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsByBidderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsByBidderRequest proto.InternalMessageInfo

func (m *QueryAuctionsByBidderRequest) GetBidderAddress() string {
	if m != nil {
		return m.BidderAddress
	}
	return ""
}

// AuctionsByBidderResponse returns all auctions containing a bidder
type QueryAuctionsByBidderResponse struct {
	// List of auctions
	Auctions *Auctions `protobuf:"bytes,1,opt,name=auctions,proto3" json:"auctions,omitempty"`
}

func (m *QueryAuctionsByBidderResponse) Reset()         { *m = QueryAuctionsByBidderResponse{} }
func (m *QueryAuctionsByBidderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsByBidderResponse) ProtoMessage()    {}
func (*QueryAuctionsByBidderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{11}
}
func (m *QueryAuctionsByBidderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsByBidderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsByBidderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsByBidderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsByBidderResponse.Merge(m, src)
}
func (m *QueryAuctionsByBidderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsByBidderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsByBidderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsByBidderResponse proto.InternalMessageInfo

func (m *QueryAuctionsByBidderResponse) GetAuctions() *Auctions {
	if m != nil {
		return m.Auctions
	}
	return nil
}

// AuctionsByOwnerRequest is the format for querying all auctions created by an
// owner
type QueryAuctionsByOwnerRequest struct {
	// Address of the owner
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
}

func (m *QueryAuctionsByOwnerRequest) Reset()         { *m = QueryAuctionsByOwnerRequest{} }
func (m *QueryAuctionsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsByOwnerRequest) ProtoMessage()    {}
func (*QueryAuctionsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{12}
}
func (m *QueryAuctionsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsByOwnerRequest.Merge(m, src)
}
func (m *QueryAuctionsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsByOwnerRequest proto.InternalMessageInfo

func (m *QueryAuctionsByOwnerRequest) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

// AuctionsByOwnerResponse returns all auctions created by an owner
type QueryAuctionsByOwnerResponse struct {
	// List of auctions
	Auctions *Auctions `protobuf:"bytes,1,opt,name=auctions,proto3" json:"auctions,omitempty"`
}

func (m *QueryAuctionsByOwnerResponse) Reset()         { *m = QueryAuctionsByOwnerResponse{} }
func (m *QueryAuctionsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsByOwnerResponse) ProtoMessage()    {}
func (*QueryAuctionsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{13}
}
func (m *QueryAuctionsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsByOwnerResponse.Merge(m, src)
}
func (m *QueryAuctionsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsByOwnerResponse proto.InternalMessageInfo

func (m *QueryAuctionsByOwnerResponse) GetAuctions() *Auctions {
	if m != nil {
		return m.Auctions
	}
	return nil
}

// BalanceRequest is the format to fetch all balances
type QueryGetAuctionModuleBalanceRequest struct {
}

func (m *QueryGetAuctionModuleBalanceRequest) Reset()         { *m = QueryGetAuctionModuleBalanceRequest{} }
func (m *QueryGetAuctionModuleBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionModuleBalanceRequest) ProtoMessage()    {}
func (*QueryGetAuctionModuleBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{14}
}
func (m *QueryGetAuctionModuleBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionModuleBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionModuleBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionModuleBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionModuleBalanceRequest.Merge(m, src)
}
func (m *QueryGetAuctionModuleBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionModuleBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionModuleBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionModuleBalanceRequest proto.InternalMessageInfo

// QueryGetAuctionModuleBalanceResponse is the response type for auction module
// balance rpc method
type QueryGetAuctionModuleBalanceResponse struct {
	// Set of all balances within the auction
	Balance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance" json:"coins" yaml:"coins"`
}

func (m *QueryGetAuctionModuleBalanceResponse) Reset()         { *m = QueryGetAuctionModuleBalanceResponse{} }
func (m *QueryGetAuctionModuleBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionModuleBalanceResponse) ProtoMessage()    {}
func (*QueryGetAuctionModuleBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2630d1607b9261b1, []int{15}
}
func (m *QueryGetAuctionModuleBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionModuleBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionModuleBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionModuleBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionModuleBalanceResponse.Merge(m, src)
}
func (m *QueryGetAuctionModuleBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionModuleBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionModuleBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionModuleBalanceResponse proto.InternalMessageInfo

func (m *QueryGetAuctionModuleBalanceResponse) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "cerc.auction.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cerc.auction.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAuctionsRequest)(nil), "cerc.auction.v1.QueryAuctionsRequest")
	proto.RegisterType((*QueryAuctionsResponse)(nil), "cerc.auction.v1.QueryAuctionsResponse")
	proto.RegisterType((*QueryGetAuctionRequest)(nil), "cerc.auction.v1.QueryGetAuctionRequest")
	proto.RegisterType((*QueryGetAuctionResponse)(nil), "cerc.auction.v1.QueryGetAuctionResponse")
	proto.RegisterType((*QueryGetBidRequest)(nil), "cerc.auction.v1.QueryGetBidRequest")
	proto.RegisterType((*QueryGetBidResponse)(nil), "cerc.auction.v1.QueryGetBidResponse")
	proto.RegisterType((*QueryGetBidsRequest)(nil), "cerc.auction.v1.QueryGetBidsRequest")
	proto.RegisterType((*QueryGetBidsResponse)(nil), "cerc.auction.v1.QueryGetBidsResponse")
	proto.RegisterType((*QueryAuctionsByBidderRequest)(nil), "cerc.auction.v1.QueryAuctionsByBidderRequest")
	proto.RegisterType((*QueryAuctionsByBidderResponse)(nil), "cerc.auction.v1.QueryAuctionsByBidderResponse")
	proto.RegisterType((*QueryAuctionsByOwnerRequest)(nil), "cerc.auction.v1.QueryAuctionsByOwnerRequest")
	proto.RegisterType((*QueryAuctionsByOwnerResponse)(nil), "cerc.auction.v1.QueryAuctionsByOwnerResponse")
	proto.RegisterType((*QueryGetAuctionModuleBalanceRequest)(nil), "cerc.auction.v1.QueryGetAuctionModuleBalanceRequest")
	proto.RegisterType((*QueryGetAuctionModuleBalanceResponse)(nil), "cerc.auction.v1.QueryGetAuctionModuleBalanceResponse")
}

func init() { proto.RegisterFile("cerc/auction/v1/query.proto", fileDescriptor_2630d1607b9261b1) }

var fileDescriptor_2630d1607b9261b1 = []byte{
	// 899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0x29, 0xb8, 0xcd, 0x2b, 0x6d, 0xd1, 0x10, 0x9a, 0x78, 0xd3, 0x6c, 0xc2, 0x24,
	0x36, 0xa6, 0xc5, 0x3b, 0xb2, 0xdb, 0x5e, 0x90, 0x10, 0xd4, 0x88, 0x56, 0x08, 0x45, 0x14, 0x4b,
	0x70, 0xe0, 0x40, 0xb5, 0xbf, 0xb4, 0x2c, 0xd8, 0x3b, 0xae, 0x67, 0x6d, 0xb0, 0x8c, 0x2f, 0xbd,
	0xc0, 0x05, 0x09, 0x09, 0x89, 0x3b, 0x17, 0x84, 0xe0, 0x1f, 0xe9, 0xb1, 0x12, 0x17, 0x4e, 0x05,
	0x25, 0xfc, 0x05, 0xfc, 0x05, 0x68, 0x67, 0xde, 0xd8, 0xf1, 0xae, 0xd7, 0x0e, 0xf4, 0x94, 0xec,
	0xcc, 0x77, 0xde, 0xfb, 0xbc, 0x37, 0x6f, 0xbe, 0x32, 0xec, 0x78, 0x41, 0xdf, 0x63, 0xce, 0xc0,
	0x4b, 0x22, 0x1e, 0xb3, 0x61, 0x83, 0x3d, 0x1c, 0x04, 0xfd, 0x91, 0xdd, 0xeb, 0xf3, 0x84, 0x93,
	0x2b, 0xe9, 0xa6, 0x8d, 0x9b, 0xf6, 0xb0, 0x61, 0x6e, 0x86, 0x3c, 0xe4, 0x72, 0x8f, 0xa5, 0xff,
	0x29, 0x99, 0x79, 0x2d, 0xe4, 0x3c, 0xec, 0x04, 0xcc, 0xe9, 0x45, 0xcc, 0x89, 0x63, 0x9e, 0x38,
	0xa9, 0x5e, 0xe0, 0xee, 0x75, 0x8f, 0x8b, 0x2e, 0x17, 0xcc, 0x75, 0x44, 0xa0, 0xa2, 0xb3, 0x61,
	0xc3, 0x0d, 0x12, 0xa7, 0xc1, 0x7a, 0x4e, 0x18, 0xc5, 0x52, 0x8c, 0x5a, 0xeb, 0xb4, 0x56, 0xab,
	0x3c, 0x1e, 0xe9, 0xfd, 0xdd, 0x2c, 0xad, 0x66, 0x93, 0xdb, 0x74, 0x13, 0xc8, 0x87, 0x69, 0x82,
	0xfb, 0x4e, 0xdf, 0xe9, 0x8a, 0x76, 0xf0, 0x70, 0x10, 0x88, 0x84, 0xde, 0x85, 0x97, 0xe6, 0x56,
	0x45, 0x8f, 0xc7, 0x22, 0x20, 0x0c, 0x4a, 0x3d, 0xb9, 0xb2, 0x6d, 0xec, 0x1b, 0xb5, 0x8b, 0xcd,
	0x2d, 0x3b, 0x53, 0xad, 0x8d, 0x07, 0x50, 0x46, 0x3f, 0x85, 0x4d, 0x19, 0xe7, 0x8e, 0x52, 0xe8,
	0xf8, 0xe4, 0x2e, 0xc0, 0xac, 0x10, 0x0c, 0x56, 0xb5, 0x55, 0x25, 0x76, 0x5a, 0x89, 0xad, 0x7a,
	0x8a, 0xf5, 0xd8, 0xf7, 0x9d, 0x30, 0xc0, 0xb3, 0xed, 0x53, 0x27, 0xe9, 0x8f, 0x06, 0xbc, 0x9c,
	0x49, 0x80, 0xa8, 0xb7, 0xe1, 0x02, 0x62, 0x69, 0xd8, 0x72, 0x0e, 0x76, 0x7a, 0x68, 0x2a, 0xcd,
	0x80, 0xad, 0xff, 0x6f, 0xb0, 0x1a, 0x5c, 0x95, 0x5c, 0xf7, 0x82, 0x04, 0xb3, 0xe8, 0xd2, 0x2f,
	0xc3, 0x7a, 0xe4, 0x4b, 0xa4, 0x8d, 0xf6, 0x7a, 0xe4, 0xd3, 0x23, 0xd8, 0xca, 0x29, 0xb1, 0x86,
	0x26, 0x9c, 0x47, 0x30, 0x2c, 0x61, 0xbb, 0xa8, 0x84, 0xb6, 0x16, 0xd2, 0xf7, 0xf1, 0x3e, 0xef,
	0x05, 0x49, 0x2b, 0xf2, 0x75, 0xd2, 0x5d, 0x00, 0x14, 0x3c, 0x98, 0x26, 0xdf, 0xc0, 0x95, 0xf7,
	0x7c, 0x72, 0x15, 0x4a, 0x6e, 0xe4, 0xfb, 0x41, 0x5f, 0x56, 0xbc, 0xd1, 0xc6, 0x2f, 0xfa, 0x26,
	0x8e, 0x81, 0x0e, 0x86, 0x5c, 0x55, 0x38, 0xe7, 0x62, 0x98, 0x8b, 0xcd, 0xcd, 0x1c, 0x53, 0x2a,
	0x4d, 0x05, 0xf4, 0xd6, 0xdc, 0x71, 0x71, 0x36, 0x18, 0xfa, 0x36, 0xce, 0xcc, 0xf4, 0x14, 0x66,
	0xad, 0xc1, 0x73, 0x6e, 0xe4, 0xa7, 0xb7, 0x79, 0xae, 0x30, 0xad, 0x54, 0xd0, 0x77, 0xe1, 0xda,
	0xdc, 0x50, 0xb4, 0x46, 0x2d, 0x59, 0x8f, 0x06, 0xa8, 0xc0, 0x65, 0x55, 0xe0, 0x03, 0xc7, 0xf7,
	0xfb, 0x81, 0x10, 0x08, 0x71, 0x49, 0xad, 0xde, 0x51, 0x8b, 0xf4, 0x63, 0xd8, 0x2d, 0x08, 0xf3,
	0x4c, 0x33, 0x46, 0x5b, 0xb0, 0x93, 0x89, 0xfb, 0xc1, 0x97, 0xf1, 0x8c, 0xee, 0x00, 0x2e, 0xf1,
	0xf4, 0x3b, 0x03, 0xf7, 0x82, 0x5c, 0xd4, 0x6c, 0x1f, 0xe5, 0x4a, 0xc4, 0x18, 0xcf, 0x86, 0x56,
	0x81, 0x83, 0xcc, 0x30, 0x1e, 0x71, 0x7f, 0xd0, 0x09, 0x5a, 0x4e, 0xc7, 0x89, 0x3d, 0x3d, 0xe9,
	0xf4, 0x37, 0x03, 0x0e, 0x97, 0xeb, 0x10, 0xe3, 0x91, 0x01, 0xe7, 0x5d, 0xb5, 0x86, 0xf7, 0x56,
	0x9e, 0x7b, 0x4c, 0xfa, 0x19, 0xbd, 0xc3, 0xa3, 0xb8, 0x75, 0xf4, 0xf8, 0xe9, 0xde, 0xda, 0x3f,
	0x4f, 0xf7, 0xca, 0x9f, 0x0b, 0x1e, 0xbf, 0x41, 0x53, 0x0f, 0x13, 0x74, 0x7f, 0xe4, 0x74, 0x3b,
	0xfa, 0xe3, 0xd7, 0x3f, 0xf7, 0x6a, 0x61, 0x94, 0x7c, 0x36, 0x70, 0x6d, 0x8f, 0x77, 0x19, 0x3a,
	0x9f, 0xfa, 0x53, 0x17, 0xfe, 0x17, 0x2c, 0x19, 0xf5, 0x02, 0x21, 0xa3, 0x89, 0xb6, 0x4e, 0xdc,
	0xfc, 0x6e, 0x03, 0x9e, 0x97, 0xb4, 0x24, 0x81, 0x92, 0x32, 0x28, 0x72, 0x90, 0xeb, 0x46, 0xde,
	0x05, 0xcd, 0xc3, 0xe5, 0x22, 0x55, 0x23, 0xdd, 0x7b, 0xf4, 0xfb, 0xdf, 0x3f, 0xac, 0x97, 0xc9,
	0x16, 0xcb, 0x3a, 0xad, 0x32, 0x41, 0xf2, 0x35, 0x5c, 0xd0, 0xad, 0x26, 0x95, 0xc5, 0x21, 0x33,
	0xfe, 0x68, 0x56, 0x57, 0xc9, 0x30, 0xf7, 0x2b, 0x32, 0xf7, 0x0e, 0x29, 0xb3, 0x02, 0x97, 0x17,
	0xe4, 0x1b, 0x03, 0x60, 0x76, 0x4d, 0xe4, 0xd5, 0xc5, 0x91, 0x73, 0x3e, 0x65, 0xd6, 0x56, 0x0b,
	0x11, 0xa2, 0x2a, 0x21, 0xf6, 0x89, 0x55, 0x08, 0xc1, 0xc6, 0x91, 0x3f, 0x21, 0xdf, 0x1a, 0x50,
	0x52, 0x8f, 0xba, 0xa8, 0xfd, 0x73, 0xa6, 0x55, 0xd4, 0xfe, 0x79, 0x33, 0xa2, 0x37, 0x65, 0xf6,
	0x3a, 0xb9, 0x91, 0xcb, 0x9e, 0x7a, 0x01, 0x1b, 0xcf, 0xac, 0x66, 0xc2, 0xc6, 0xea, 0x81, 0x4f,
	0xe4, 0x5c, 0xa2, 0xbf, 0x90, 0xa5, 0x69, 0xa6, 0x37, 0x52, 0x59, 0xa1, 0x42, 0x9a, 0xeb, 0x92,
	0xe6, 0x90, 0xd0, 0xd5, 0x34, 0xe4, 0x67, 0x03, 0x5e, 0xcc, 0x7a, 0x0b, 0xa9, 0x2f, 0xbf, 0xf9,
	0x8c, 0x95, 0x99, 0xf6, 0x59, 0xe5, 0xab, 0xbb, 0x35, 0xaa, 0xab, 0xee, 0xe8, 0x2e, 0x69, 0xff,
	0x99, 0x90, 0x9f, 0x0c, 0xb8, 0x92, 0x31, 0x1a, 0xf2, 0xfa, 0xaa, 0xc4, 0xa7, 0x3d, 0xcd, 0xac,
	0x9f, 0x51, 0x8d, 0x94, 0x0d, 0x49, 0x79, 0x83, 0xbc, 0xb6, 0x88, 0x52, 0xfa, 0x20, 0x1b, 0xcf,
	0x79, 0xe4, 0x84, 0xfc, 0x62, 0xc0, 0x56, 0x81, 0x1b, 0x91, 0x5b, 0xab, 0x46, 0x79, 0x91, 0xc9,
	0x99, 0xb7, 0xff, 0xe3, 0x29, 0x64, 0xdf, 0x97, 0xec, 0x26, 0xd9, 0xce, 0xb3, 0x2b, 0x65, 0xeb,
	0xad, 0xc7, 0xc7, 0x96, 0xf1, 0xe4, 0xd8, 0x32, 0xfe, 0x3a, 0xb6, 0x8c, 0xef, 0x4f, 0xac, 0xb5,
	0x27, 0x27, 0xd6, 0xda, 0x1f, 0x27, 0xd6, 0xda, 0x27, 0x95, 0x30, 0x4a, 0xec, 0xa1, 0xef, 0xda,
	0x09, 0x97, 0xa7, 0xeb, 0x11, 0x67, 0x1d, 0xc7, 0xe3, 0x71, 0xe4, 0xf9, 0xec, 0x2b, 0x1d, 0xcb,
	0x2d, 0xc9, 0x9f, 0x6e, 0x37, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x31, 0x96, 0xac, 0x89,
	0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries auction module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Auctions queries all auctions
	Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error)
	// GetAuction queries an auction
	GetAuction(ctx context.Context, in *QueryGetAuctionRequest, opts ...grpc.CallOption) (*QueryGetAuctionResponse, error)
	// GetBid queries an auction bid
	GetBid(ctx context.Context, in *QueryGetBidRequest, opts ...grpc.CallOption) (*QueryGetBidResponse, error)
	// GetBids queries all auction bids
	GetBids(ctx context.Context, in *QueryGetBidsRequest, opts ...grpc.CallOption) (*QueryGetBidsResponse, error)
	// AuctionsByBidder queries auctions by bidder
	AuctionsByBidder(ctx context.Context, in *QueryAuctionsByBidderRequest, opts ...grpc.CallOption) (*QueryAuctionsByBidderResponse, error)
	// AuctionsByOwner queries auctions by owner
	AuctionsByOwner(ctx context.Context, in *QueryAuctionsByOwnerRequest, opts ...grpc.CallOption) (*QueryAuctionsByOwnerResponse, error)
	// GetAuctionModuleBalance queries the auction module account balance
	GetAuctionModuleBalance(ctx context.Context, in *QueryGetAuctionModuleBalanceRequest, opts ...grpc.CallOption) (*QueryGetAuctionModuleBalanceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cerc.auction.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error) {
	out := new(QueryAuctionsResponse)
	err := c.cc.Invoke(ctx, "/cerc.auction.v1.Query/Auctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAuction(ctx context.Context, in *QueryGetAuctionRequest, opts ...grpc.CallOption) (*QueryGetAuctionResponse, error) {
	out := new(QueryGetAuctionResponse)
	err := c.cc.Invoke(ctx, "/cerc.auction.v1.Query/GetAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBid(ctx context.Context, in *QueryGetBidRequest, opts ...grpc.CallOption) (*QueryGetBidResponse, error) {
	out := new(QueryGetBidResponse)
	err := c.cc.Invoke(ctx, "/cerc.auction.v1.Query/GetBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBids(ctx context.Context, in *QueryGetBidsRequest, opts ...grpc.CallOption) (*QueryGetBidsResponse, error) {
	out := new(QueryGetBidsResponse)
	err := c.cc.Invoke(ctx, "/cerc.auction.v1.Query/GetBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionsByBidder(ctx context.Context, in *QueryAuctionsByBidderRequest, opts ...grpc.CallOption) (*QueryAuctionsByBidderResponse, error) {
	out := new(QueryAuctionsByBidderResponse)
	err := c.cc.Invoke(ctx, "/cerc.auction.v1.Query/AuctionsByBidder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionsByOwner(ctx context.Context, in *QueryAuctionsByOwnerRequest, opts ...grpc.CallOption) (*QueryAuctionsByOwnerResponse, error) {
	out := new(QueryAuctionsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/cerc.auction.v1.Query/AuctionsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAuctionModuleBalance(ctx context.Context, in *QueryGetAuctionModuleBalanceRequest, opts ...grpc.CallOption) (*QueryGetAuctionModuleBalanceResponse, error) {
	out := new(QueryGetAuctionModuleBalanceResponse)
	err := c.cc.Invoke(ctx, "/cerc.auction.v1.Query/GetAuctionModuleBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries auction module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Auctions queries all auctions
	Auctions(context.Context, *QueryAuctionsRequest) (*QueryAuctionsResponse, error)
	// GetAuction queries an auction
	GetAuction(context.Context, *QueryGetAuctionRequest) (*QueryGetAuctionResponse, error)
	// GetBid queries an auction bid
	GetBid(context.Context, *QueryGetBidRequest) (*QueryGetBidResponse, error)
	// GetBids queries all auction bids
	GetBids(context.Context, *QueryGetBidsRequest) (*QueryGetBidsResponse, error)
	// AuctionsByBidder queries auctions by bidder
	AuctionsByBidder(context.Context, *QueryAuctionsByBidderRequest) (*QueryAuctionsByBidderResponse, error)
	// AuctionsByOwner queries auctions by owner
	AuctionsByOwner(context.Context, *QueryAuctionsByOwnerRequest) (*QueryAuctionsByOwnerResponse, error)
	// GetAuctionModuleBalance queries the auction module account balance
	GetAuctionModuleBalance(context.Context, *QueryGetAuctionModuleBalanceRequest) (*QueryGetAuctionModuleBalanceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Auctions(ctx context.Context, req *QueryAuctionsRequest) (*QueryAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auctions not implemented")
}
func (*UnimplementedQueryServer) GetAuction(ctx context.Context, req *QueryGetAuctionRequest) (*QueryGetAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuction not implemented")
}
func (*UnimplementedQueryServer) GetBid(ctx context.Context, req *QueryGetBidRequest) (*QueryGetBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBid not implemented")
}
func (*UnimplementedQueryServer) GetBids(ctx context.Context, req *QueryGetBidsRequest) (*QueryGetBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBids not implemented")
}
func (*UnimplementedQueryServer) AuctionsByBidder(ctx context.Context, req *QueryAuctionsByBidderRequest) (*QueryAuctionsByBidderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionsByBidder not implemented")
}
func (*UnimplementedQueryServer) AuctionsByOwner(ctx context.Context, req *QueryAuctionsByOwnerRequest) (*QueryAuctionsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionsByOwner not implemented")
}
func (*UnimplementedQueryServer) GetAuctionModuleBalance(ctx context.Context, req *QueryGetAuctionModuleBalanceRequest) (*QueryGetAuctionModuleBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuctionModuleBalance not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerc.auction.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Auctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Auctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerc.auction.v1.Query/Auctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Auctions(ctx, req.(*QueryAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerc.auction.v1.Query/GetAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAuction(ctx, req.(*QueryGetAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerc.auction.v1.Query/GetBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBid(ctx, req.(*QueryGetBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerc.auction.v1.Query/GetBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBids(ctx, req.(*QueryGetBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionsByBidder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionsByBidderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionsByBidder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerc.auction.v1.Query/AuctionsByBidder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionsByBidder(ctx, req.(*QueryAuctionsByBidderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerc.auction.v1.Query/AuctionsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionsByOwner(ctx, req.(*QueryAuctionsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAuctionModuleBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuctionModuleBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAuctionModuleBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cerc.auction.v1.Query/GetAuctionModuleBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAuctionModuleBalance(ctx, req.(*QueryGetAuctionModuleBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cerc.auction.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Auctions",
			Handler:    _Query_Auctions_Handler,
		},
		{
			MethodName: "GetAuction",
			Handler:    _Query_GetAuction_Handler,
		},
		{
			MethodName: "GetBid",
			Handler:    _Query_GetBid_Handler,
		},
		{
			MethodName: "GetBids",
			Handler:    _Query_GetBids_Handler,
		},
		{
			MethodName: "AuctionsByBidder",
			Handler:    _Query_AuctionsByBidder_Handler,
		},
		{
			MethodName: "AuctionsByOwner",
			Handler:    _Query_AuctionsByOwner_Handler,
		},
		{
			MethodName: "GetAuctionModuleBalance",
			Handler:    _Query_GetAuctionModuleBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cerc/auction/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Auctions != nil {
		{
			size, err := m.Auctions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuctionId) > 0 {
		i -= len(m.AuctionId)
		copy(dAtA[i:], m.AuctionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AuctionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bid != nil {
		{
			size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuctionId) > 0 {
		i -= len(m.AuctionId)
		copy(dAtA[i:], m.AuctionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AuctionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsByBidderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsByBidderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsByBidderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidderAddress) > 0 {
		i -= len(m.BidderAddress)
		copy(dAtA[i:], m.BidderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BidderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsByBidderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsByBidderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsByBidderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auctions != nil {
		{
			size, err := m.Auctions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auctions != nil {
		{
			size, err := m.Auctions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionModuleBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionModuleBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionModuleBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionModuleBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionModuleBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionModuleBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auctions != nil {
		l = m.Auctions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuctionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bid != nil {
		l = m.Bid.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuctionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAuctionsByBidderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BidderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionsByBidderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auctions != nil {
		l = m.Auctions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auctions != nil {
		l = m.Auctions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuctionModuleBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAuctionModuleBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auctions == nil {
				m.Auctions = &Auctions{}
			}
			if err := m.Auctions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &Auction{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bid == nil {
				m.Bid = &Bid{}
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsByBidderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsByBidderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsByBidderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsByBidderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsByBidderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsByBidderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auctions == nil {
				m.Auctions = &Auctions{}
			}
			if err := m.Auctions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auctions == nil {
				m.Auctions = &Auctions{}
			}
			if err := m.Auctions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionModuleBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionModuleBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionModuleBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionModuleBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionModuleBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionModuleBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
