// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cerc/registry/v1/tx.proto

package registryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_SetRecord_FullMethodName          = "/cerc.registry.v1.Msg/SetRecord"
	Msg_RenewRecord_FullMethodName        = "/cerc.registry.v1.Msg/RenewRecord"
	Msg_AssociateBond_FullMethodName      = "/cerc.registry.v1.Msg/AssociateBond"
	Msg_DissociateBond_FullMethodName     = "/cerc.registry.v1.Msg/DissociateBond"
	Msg_DissociateRecords_FullMethodName  = "/cerc.registry.v1.Msg/DissociateRecords"
	Msg_ReassociateRecords_FullMethodName = "/cerc.registry.v1.Msg/ReassociateRecords"
	Msg_SetName_FullMethodName            = "/cerc.registry.v1.Msg/SetName"
	Msg_DeleteName_FullMethodName         = "/cerc.registry.v1.Msg/DeleteName"
	Msg_ReserveAuthority_FullMethodName   = "/cerc.registry.v1.Msg/ReserveAuthority"
	Msg_SetAuthorityBond_FullMethodName   = "/cerc.registry.v1.Msg/SetAuthorityBond"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// SetRecord records a new record with given payload and bond id
	SetRecord(ctx context.Context, in *MsgSetRecord, opts ...grpc.CallOption) (*MsgSetRecordResponse, error)
	// Renew Record renews an expired record
	RenewRecord(ctx context.Context, in *MsgRenewRecord, opts ...grpc.CallOption) (*MsgRenewRecordResponse, error)
	// AssociateBond
	AssociateBond(ctx context.Context, in *MsgAssociateBond, opts ...grpc.CallOption) (*MsgAssociateBondResponse, error)
	// DissociateBond
	DissociateBond(ctx context.Context, in *MsgDissociateBond, opts ...grpc.CallOption) (*MsgDissociateBondResponse, error)
	// DissociateRecords
	DissociateRecords(ctx context.Context, in *MsgDissociateRecords, opts ...grpc.CallOption) (*MsgDissociateRecordsResponse, error)
	// ReassociateRecords
	ReassociateRecords(ctx context.Context, in *MsgReassociateRecords, opts ...grpc.CallOption) (*MsgReassociateRecordsResponse, error)
	// SetName will store the name with given lrn and name
	SetName(ctx context.Context, in *MsgSetName, opts ...grpc.CallOption) (*MsgSetNameResponse, error)
	// Delete Name method will remove authority name
	DeleteName(ctx context.Context, in *MsgDeleteName, opts ...grpc.CallOption) (*MsgDeleteNameResponse, error)
	// Reserve authority name
	ReserveAuthority(ctx context.Context, in *MsgReserveAuthority, opts ...grpc.CallOption) (*MsgReserveAuthorityResponse, error)
	// SetAuthorityBond
	SetAuthorityBond(ctx context.Context, in *MsgSetAuthorityBond, opts ...grpc.CallOption) (*MsgSetAuthorityBondResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetRecord(ctx context.Context, in *MsgSetRecord, opts ...grpc.CallOption) (*MsgSetRecordResponse, error) {
	out := new(MsgSetRecordResponse)
	err := c.cc.Invoke(ctx, Msg_SetRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RenewRecord(ctx context.Context, in *MsgRenewRecord, opts ...grpc.CallOption) (*MsgRenewRecordResponse, error) {
	out := new(MsgRenewRecordResponse)
	err := c.cc.Invoke(ctx, Msg_RenewRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AssociateBond(ctx context.Context, in *MsgAssociateBond, opts ...grpc.CallOption) (*MsgAssociateBondResponse, error) {
	out := new(MsgAssociateBondResponse)
	err := c.cc.Invoke(ctx, Msg_AssociateBond_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DissociateBond(ctx context.Context, in *MsgDissociateBond, opts ...grpc.CallOption) (*MsgDissociateBondResponse, error) {
	out := new(MsgDissociateBondResponse)
	err := c.cc.Invoke(ctx, Msg_DissociateBond_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DissociateRecords(ctx context.Context, in *MsgDissociateRecords, opts ...grpc.CallOption) (*MsgDissociateRecordsResponse, error) {
	out := new(MsgDissociateRecordsResponse)
	err := c.cc.Invoke(ctx, Msg_DissociateRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReassociateRecords(ctx context.Context, in *MsgReassociateRecords, opts ...grpc.CallOption) (*MsgReassociateRecordsResponse, error) {
	out := new(MsgReassociateRecordsResponse)
	err := c.cc.Invoke(ctx, Msg_ReassociateRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetName(ctx context.Context, in *MsgSetName, opts ...grpc.CallOption) (*MsgSetNameResponse, error) {
	out := new(MsgSetNameResponse)
	err := c.cc.Invoke(ctx, Msg_SetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteName(ctx context.Context, in *MsgDeleteName, opts ...grpc.CallOption) (*MsgDeleteNameResponse, error) {
	out := new(MsgDeleteNameResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReserveAuthority(ctx context.Context, in *MsgReserveAuthority, opts ...grpc.CallOption) (*MsgReserveAuthorityResponse, error) {
	out := new(MsgReserveAuthorityResponse)
	err := c.cc.Invoke(ctx, Msg_ReserveAuthority_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetAuthorityBond(ctx context.Context, in *MsgSetAuthorityBond, opts ...grpc.CallOption) (*MsgSetAuthorityBondResponse, error) {
	out := new(MsgSetAuthorityBondResponse)
	err := c.cc.Invoke(ctx, Msg_SetAuthorityBond_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// SetRecord records a new record with given payload and bond id
	SetRecord(context.Context, *MsgSetRecord) (*MsgSetRecordResponse, error)
	// Renew Record renews an expired record
	RenewRecord(context.Context, *MsgRenewRecord) (*MsgRenewRecordResponse, error)
	// AssociateBond
	AssociateBond(context.Context, *MsgAssociateBond) (*MsgAssociateBondResponse, error)
	// DissociateBond
	DissociateBond(context.Context, *MsgDissociateBond) (*MsgDissociateBondResponse, error)
	// DissociateRecords
	DissociateRecords(context.Context, *MsgDissociateRecords) (*MsgDissociateRecordsResponse, error)
	// ReassociateRecords
	ReassociateRecords(context.Context, *MsgReassociateRecords) (*MsgReassociateRecordsResponse, error)
	// SetName will store the name with given lrn and name
	SetName(context.Context, *MsgSetName) (*MsgSetNameResponse, error)
	// Delete Name method will remove authority name
	DeleteName(context.Context, *MsgDeleteName) (*MsgDeleteNameResponse, error)
	// Reserve authority name
	ReserveAuthority(context.Context, *MsgReserveAuthority) (*MsgReserveAuthorityResponse, error)
	// SetAuthorityBond
	SetAuthorityBond(context.Context, *MsgSetAuthorityBond) (*MsgSetAuthorityBondResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) SetRecord(context.Context, *MsgSetRecord) (*MsgSetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecord not implemented")
}
func (UnimplementedMsgServer) RenewRecord(context.Context, *MsgRenewRecord) (*MsgRenewRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewRecord not implemented")
}
func (UnimplementedMsgServer) AssociateBond(context.Context, *MsgAssociateBond) (*MsgAssociateBondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateBond not implemented")
}
func (UnimplementedMsgServer) DissociateBond(context.Context, *MsgDissociateBond) (*MsgDissociateBondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissociateBond not implemented")
}
func (UnimplementedMsgServer) DissociateRecords(context.Context, *MsgDissociateRecords) (*MsgDissociateRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DissociateRecords not implemented")
}
func (UnimplementedMsgServer) ReassociateRecords(context.Context, *MsgReassociateRecords) (*MsgReassociateRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReassociateRecords not implemented")
}
func (UnimplementedMsgServer) SetName(context.Context, *MsgSetName) (*MsgSetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetName not implemented")
}
func (UnimplementedMsgServer) DeleteName(context.Context, *MsgDeleteName) (*MsgDeleteNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteName not implemented")
}
func (UnimplementedMsgServer) ReserveAuthority(context.Context, *MsgReserveAuthority) (*MsgReserveAuthorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveAuthority not implemented")
}
func (UnimplementedMsgServer) SetAuthorityBond(context.Context, *MsgSetAuthorityBond) (*MsgSetAuthorityBondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthorityBond not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_SetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetRecord(ctx, req.(*MsgSetRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RenewRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRenewRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RenewRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RenewRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RenewRecord(ctx, req.(*MsgRenewRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AssociateBond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAssociateBond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AssociateBond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AssociateBond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AssociateBond(ctx, req.(*MsgAssociateBond))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DissociateBond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDissociateBond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DissociateBond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DissociateBond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DissociateBond(ctx, req.(*MsgDissociateBond))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DissociateRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDissociateRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DissociateRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DissociateRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DissociateRecords(ctx, req.(*MsgDissociateRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReassociateRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReassociateRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReassociateRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReassociateRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReassociateRecords(ctx, req.(*MsgReassociateRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetName(ctx, req.(*MsgSetName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteName(ctx, req.(*MsgDeleteName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReserveAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReserveAuthority)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReserveAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReserveAuthority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReserveAuthority(ctx, req.(*MsgReserveAuthority))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetAuthorityBond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetAuthorityBond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetAuthorityBond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetAuthorityBond_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetAuthorityBond(ctx, req.(*MsgSetAuthorityBond))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cerc.registry.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRecord",
			Handler:    _Msg_SetRecord_Handler,
		},
		{
			MethodName: "RenewRecord",
			Handler:    _Msg_RenewRecord_Handler,
		},
		{
			MethodName: "AssociateBond",
			Handler:    _Msg_AssociateBond_Handler,
		},
		{
			MethodName: "DissociateBond",
			Handler:    _Msg_DissociateBond_Handler,
		},
		{
			MethodName: "DissociateRecords",
			Handler:    _Msg_DissociateRecords_Handler,
		},
		{
			MethodName: "ReassociateRecords",
			Handler:    _Msg_ReassociateRecords_Handler,
		},
		{
			MethodName: "SetName",
			Handler:    _Msg_SetName_Handler,
		},
		{
			MethodName: "DeleteName",
			Handler:    _Msg_DeleteName_Handler,
		},
		{
			MethodName: "ReserveAuthority",
			Handler:    _Msg_ReserveAuthority_Handler,
		},
		{
			MethodName: "SetAuthorityBond",
			Handler:    _Msg_SetAuthorityBond_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cerc/registry/v1/tx.proto",
}
